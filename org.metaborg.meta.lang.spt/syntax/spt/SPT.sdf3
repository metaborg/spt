module spt/SPT

imports spt/Common
imports spt/ATerm

context-free start-symbols TestSuite

syntax
  // All layout between fragment markers has to be considered part of the fragment text
  TestFixture-CF.Fixture2 = "fixture" LAYOUT-CF OpenMarker2-CF StringPart2-CF OpenMarker2-CF LAYOUT?-CF "..." LAYOUT?-CF CloseMarker2-CF StringPart2-CF CloseMarker2-CF
  TestFixture-CF.Fixture3 = "fixture" LAYOUT-CF OpenMarker3-CF StringPart3-CF OpenMarker3-CF LAYOUT?-CF "..." LAYOUT?-CF CloseMarker3-CF StringPart3-CF CloseMarker3-CF
  TestFixture-CF.Fixture4 = "fixture" LAYOUT-CF OpenMarker4-CF StringPart4-CF OpenMarker4-CF LAYOUT?-CF "..." LAYOUT?-CF CloseMarker4-CF StringPart4-CF CloseMarker4-CF

  TestDecl-CF.Test2 = "test" LAYOUT?-CF Description-CF LAYOUT?-CF OpenMarker2-CF Fragment2-CF CloseMarker2-CF LAYOUT?-CF Expectations-CF
  TestDecl-CF.Test3 = "test" LAYOUT?-CF Description-CF LAYOUT?-CF OpenMarker3-CF Fragment3-CF CloseMarker3-CF LAYOUT?-CF Expectations-CF
  TestDecl-CF.Test4 = "test" LAYOUT?-CF Description-CF LAYOUT?-CF OpenMarker4-CF Fragment4-CF CloseMarker4-CF LAYOUT?-CF Expectations-CF

  Fragment2-CF.Fragment = StringPart2-CF TailPart2-CF
  Fragment3-CF.Fragment = StringPart3-CF TailPart3-CF
  Fragment4-CF.Fragment = StringPart4-CF TailPart4-CF
  
  TailPart2-CF.More = Selection2-CF StringPart2-CF TailPart2-CF
  TailPart3-CF.More = Selection3-CF StringPart3-CF TailPart3-CF
  TailPart4-CF.More = Selection4-CF StringPart4-CF TailPart4-CF
  
  Selection2-CF.Selection = OpenBracket2-CF StringPart2-CF CloseBracket2-CF
  Selection3-CF.Selection = OpenBracket3-CF StringPart3-CF CloseBracket3-CF
  Selection4-CF.Selection = OpenBracket4-CF StringPart4-CF CloseBracket4-CF

context-free syntax
  TestSuite.TestSuite = <
    <{Header "\n"}+>
    <TestFixture?>
    <{TestDecl "\n\n"}*>
  >

  Header.Name = <module <MODULE>>
  // the start symbol is not supported yet by the SPT implementation
  Header.StartSymbol = <start symbol <ID>>
  Header.Language = <language <LANG>>

  TailPart2.Done = <>
  TailPart3.Done = <>
  TailPart4.Done = <>

  // for now we only have brackets as markers
  OpenMarker2 = OpenBracket2
  OpenMarker3 = OpenBracket3
  OpenMarker4 = OpenBracket4
  CloseMarker2 = CloseBracket2
  CloseMarker3 = CloseBracket3
  CloseMarker4 = CloseBracket4
  
  // Expectations
  Expectations = <<{Expectation "\n"}*>>
  
  // generic negative expectation
  Expectation.Not = <not <Expectation>>

  // a term for the 'to' part that many expectations use
  ToPart.ToPart2 = <
    to <LANG?> <OpenMarker2>
      <Fragment2>
    <CloseMarker2>
  >
  ToPart.ToPart3 = <
    to <LANG?> <OpenMarker3>
      <Fragment3>
    <CloseMarker3>
  >
  ToPart.ToPart4 = <
    to <LANG?> <OpenMarker4>
      <Fragment4>
    <CloseMarker4>
  >
  // to ATerm:
  ToAterm.ToAterm = <to <ATerm>>
  
  // parse expectations 
  Expectation.ParseSucceeds = <parse succeeds>
  Expectation.ParseFails = <parse fails>
  Expectation.ParseTo = <parse <ToPart>>
  Expectation.ParseToAterm = <parse <ToAterm>>
  
  // analysis expectations
  SelectionRef.SelectionRef = <#<INT>>
  AtPart.AtPart = <at <{SelectionRef ", "}+>>
  Expectation.AnalyzeMessages = <<MessageOp?> <INT> <Severity> <AtPart?>>
  Expectation.AnalyzeMessagePattern = <<Severity> like <STRING> <AtPart?>>
  // desugared to 0 errors
  Expectation.AnalyzeSucceeds = <analysis succeeds>
  // desugared to > 0 errors
  Expectation.AnalyzeFails = <analysis fails>
  
  
  // reference resolution expectations
  Expectation.Resolve = <resolve #<INT>>
  Expectation.ResolveTo = <resolve #<INT> to #<INT>>

  // origin expectations
  Expectation.HasOrigin = <has origin locations>
  
  // running stratego strategies expectations
  OnPart.OnPart = <on #<INT>>
  Expectation.Run = <run <STRAT> <OnPart?>>
  Expectation.RunTo = <run <STRAT> <OnPart?> <ToPart>>
  Expectation.RunToAterm = <run <STRAT> <OnPart?> <ToAterm>>
  
  // transformations
  Expectation.Transform = <transform <STRING>>
  Expectation.Transform = <transform <STRING> <ToPart>>
  Expectation.TransformToAterm = <transform <STRING> <ToAterm>>

lexical syntax
  // syntax for the analyze expectation
  Severity.Error = "error"
  Severity.Error = "errors"
  Severity.Warning = "warning"
  Severity.Warning = "warnings"
  Severity.Note = "note"
  Severity.Note = "notes"
  MessageOp.Equal = "="
  MessageOp.Less = "<"
  MessageOp.LessOrEqual = "<="
  MessageOp.More = ">"
  MessageOp.MoreOrEqual = ">="

  // NOTE: everything until the opening marker or newline is the description 
  // update this when a new type of opening marker is introduced
  Description = (~[\n\r\[])+
  
  OpenBracket1 = "["
  OpenBracket2 = "[["
  OpenBracket3 = "[[["
  OpenBracket4 = "[[[["
  CloseBracket1 = "]"
  CloseBracket2 = "]]"
  CloseBracket3 = "]]]"
  CloseBracket4 = "]]]]"
  
  // everything that isn't a [[ or ]] (or more brackets) will be a stringpart2
  // update these when a new type of opening or closing marker is introduced
  StringPart2 = (~[\[\]] | OpenBracket1 | CloseBracket1)*
  StringPart3 = (~[\[] | OpenBracket1 | CloseBracket1 | OpenBracket2 | CloseBracket2)*
  StringPart4 = (~[\[] | OpenBracket1 | CloseBracket1 | OpenBracket2 | CloseBracket2 | OpenBracket3 | CloseBracket3)*
  
lexical restrictions  
  MessageOp -/- [\=]
  Severity -/- [a-z]

  // NOTE: everything until the opening marker or newline is the description
  // update this when a new opening marker is introduced
  Description -/- [\ \t]
  
  // update these when a new opening or closing marker is introduced
  OpenBracket1 -/- [\[]
  OpenBracket2 -/- [\[]
  OpenBracket3 -/- [\[]
  OpenBracket4 -/- [\[]
  CloseBracket1 -/- [\]]
  CloseBracket2 -/- [\]]
  CloseBracket3 -/- [\]]
  CloseBracket4 -/- [\]]
  
  // NOTE: everything until the marker is part of the StringPart of a fragment
  // update these when a new opening or closing marker is introduced
  // TODO: shouldn't be required anymore
  StringPart2 -/- ~[\[\]]
  StringPart3 -/- ~[\[\]]
  StringPart4 -/- ~[\[\]]
  
  
