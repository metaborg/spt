module spt/desugar

imports
  signatures/spt/-

signature constructors
  // Test(description, open_marker, fragment, close_marker, expectations)
  Test : String * String * Fragment * String * List -> Test
  // Fixture(open_marker1, str1, open_marker2, close_marker2, str2, close_marker1)
  Fixture : String * String * String * String * String * String -> Fixture
  // ParseTo(language_name, open_marker, fragment, close_marker)
  ToPart : String * String * Fragment * String -> ParseTo
  // For analyze messages
  Error : String -> Error
  Warning : String -> Warning
  Note : String -> Note
  Equal : Equal
  Less : Less
  LessOrEqual : LessOrEqual
  More : More
  MoreOrEqual : MoreOrEqual

rules
  desugar-before = topdown(try(desugar-term-before))
  
  // Desugar Test
  desugar-term-before:
    cons#([description, open_marker, fragment, close_marker, exps]) -> <try(desugar-test)> Test(description, open_marker, fragment, close_marker, exps)
    where
      <eq> (cons, "Test2") + <eq> (cons, "Test3") + <eq> (cons, "Test4")
  
  // Add a parse succeeds expectation if no parse expectation is present
  desugar-test:
    Test(description, open_marker, fragment, close_marker, expectations) -> Test(description, open_marker, fragment, close_marker, expectations')
    where
      [] := <filter(?ParseSucceeds() + ?ParseFails() + ?ParseAmbiguous() + ?ParseTo(_) + ?ParseToAterm(_))> expectations;
      expectations' := [ParseSucceeds() | expectations]
  
  // Desugar Fixture
  desugar-term-before:
    cons#([open_marker1, str1, open_marker2, close_marker2, str2, close_marker1]) -> Fixture(open_marker1, str1, open_marker2, close_marker2, str2, close_marker1)
    where
      <eq> (cons, "Fixture2") + <eq> (cons, "Fixture3") + <eq> (cons, "Fixture4")
  
  // Desugar ToPart
  desugar-term-before:
    cons#([lang_name, open_marker, fragment, close_marker]) -> ToPart(lang_name, open_marker, fragment, close_marker)
    where
      <eq> (cons, "ToPart2") + <eq> (cons, "ToPart3") + <eq> (cons, "ToPart4")
  
  // Desugar analysis succeeds/fails
  desugar-term-before:
    AnalyzeSucceeds() -> AnalyzeMessages(Some(Equal()), 0, Error("errors"), None())
  desugar-term-before:
    AnalyzeFails() -> AnalyzeMessages(Some(More()), 0, Error("errors"), None())
  
  // Desugar 'n errors' expectation
  desugar-term-before:
    AnalyzeMessages(op, n, sev, atpart) -> AnalyzeMessages(<desugar-message-op> op, <dec-string-to-int> n, <desugar-severity> sev, atpart)
  desugar-term-before:
    AnalyzeMessagePattern(sev, content, atpart) -> AnalyzeMessagePattern(<desugar-severity> sev, <un-double-quote> content, atpart)
  desugar-severity = ?sev ; (?"error" + ?"errors") ; !Error(sev)
  desugar-severity = ?sev ; (?"warning" + ?"warnings") ; !Warning(sev)
  desugar-severity = ?sev ; (?"note" + ?"notes") ; !Note(sev)
  desugar-message-op = ?None
  desugar-message-op : Some("=") -> Some(Equal())
  desugar-message-op : Some("<") -> Some(Less())
  desugar-message-op : Some("<=") -> Some(LessOrEqual())
  desugar-message-op : Some(">") -> Some(More())
  desugar-message-op : Some(">=") -> Some(MoreOrEqual())  
  
  
  // Desugar from a SelectionRef(string) to an int
  desugar-term-before:
    AtPart(selrefs) -> AtPart(<map(desugar-selection-ref)> selrefs)
  desugar-selection-ref:
    SelectionRef(n) -> i
    with
      i := <spt-string-to-int> n
      
  // Desugar from a string to an int inside Errors|Warnings|Notes
  desugar-term-before:
    cons#([n]) -> cons#([i])
    where
      <eq> (cons, "Warnings") + <eq> (cons, "Errors") + <eq> (cons, "Notes")
      with
        i := <spt-string-to-int> n
        

  // Desugar from a string to an int inside Resolve|ResolveTo
  desugar-term-before:
    Resolve(n) -> Resolve(i)
    with
      i := <spt-string-to-int> n

  desugar-term-before:
    ResolveTo(x,y) -> ResolveTo(i, j)
    with
      i := <spt-string-to-int> x;
      j := <spt-string-to-int> y
      
      
  // Desugar OnPart to int
  desugar-term-before:
    OnPart(n) -> i
    with
      i := <spt-string-to-int> n      
      
  // Desugar our ATerms
  // desugar-term-before:
  //   Anno(term, annos) -> term{annos}

  // desugar-term-before:
  //   Appl(cons, children) -> cons#(children)

  // desugar-term-before:
  //   List(l) -> l
    
  // desugar-term-before:
  //   Int(n) -> <dec-string-to-int> n
    
  desugar-term-before:
    String(s) -> String(<try(un-double-quote);string-replace(|"\\\"", "\"")> s)
    
rules

  spt-string-to-int = origin-track-forced(dec-string-to-int)